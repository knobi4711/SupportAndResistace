#region Using declarations
using System;
using NinjaTrader.Cbi;
using NinjaTrader.Gui.Tools;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
#endregion

namespace NinjaTrader.NinjaScript.Strategies
{
    public class SupportResistanceStrategy : Strategy
    {
        #region Variables
        private double atrValue;
        #endregion

        #region Properties
        private double atrMultiplierSL = 2.0;
        private double atrMultiplierTP = 3.0;
        private double maxLossPercent = 1.0;
        private double trailingStopMultiplier = 1.5;
        private int atrPeriod = 14;

        [NinjaScriptProperty]
        [Range(1, double.MaxValue)]
        [Display(Name = "ATR Multiplier SL", Order = 1, GroupName = "Parameters")]
        public double AtrMultiplierSL
        {
            get { return atrMultiplierSL; }
            set { atrMultiplierSL = value; }
        }

        [NinjaScriptProperty]
        [Range(1, double.MaxValue)]
        [Display(Name = "ATR Multiplier TP", Order = 2, GroupName = "Parameters")]
        public double AtrMultiplierTP
        {
            get { return atrMultiplierTP; }
            set { atrMultiplierTP = value; }
        }

        [NinjaScriptProperty]
        [Range(0.1, 100)]
        [Display(Name = "Max Loss Percent", Order = 3, GroupName = "Parameters")]
        public double MaxLossPercent
        {
            get { return maxLossPercent; }
            set { maxLossPercent = value; }
        }

        [NinjaScriptProperty]
        [Range(1, double.MaxValue)]
        [Display(Name = "Trailing Stop Multiplier", Order = 4, GroupName = "Parameters")]
        public double TrailingStopMultiplier
        {
            get { return trailingStopMultiplier; }
            set { trailingStopMultiplier = value; }
        }

        [NinjaScriptProperty]
        [Range(1, int.MaxValue)]
        [Display(Name = "ATR Period", Order = 5, GroupName = "Parameters")]
        public int AtrPeriod
        {
            get { return atrPeriod; }
            set { atrPeriod = value; }
        }
        #endregion

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Description = @"Strategy using support and resistance levels with ATR-based stop loss and take profit, and a trailing stop.";
                Name = "SupportResistanceStrategy";
                Calculate = Calculate.OnEachTick;
                IsOverlay = false;
                AddDataSeries(Data.BarsPeriodType.Day, 1);
            }
            else if (State == State.Configure)
            {
                // ATR wird f체r das prim채re DataSeries hinzugef체gt
                AddDataSeries(BarsPeriodType.Day, 1);
            }
            else if (State == State.DataLoaded)
            {
                // Nicht erforderlich, da wir ATR direkt verwenden
            }
        }

        protected override void OnBarUpdate()
        {
            if (BarsInProgress != 0)
                return;

            // ATR-Wert des prim채ren DataSeries holen
            atrValue = ATR(AtrPeriod)[0];
            double maxRisk = Account.Get(AccountItem.CashValue, Currency.UsDollar) * (MaxLossPercent / 100);
            int positionSize = (int)(maxRisk / (atrValue * AtrMultiplierSL));

            // Support und Resistance Levels definieren (Beispiellogik)
            double supportLevel = Low[1];
            double resistanceLevel = High[1];

            // Entry Bedingungen
            if (CrossAbove(Close, resistanceLevel, 1))
            {
                EnterLong(positionSize, "LongTrade");
                SetOrdersForLongTrade();
            }
            else if (CrossBelow(Close, supportLevel, 1))
            {
                EnterShort(positionSize, "ShortTrade");
                SetOrdersForShortTrade();
            }
        }

        private void SetOrdersForLongTrade()
        {
            double stopLossPrice = Position.AveragePrice - (atrValue * AtrMultiplierSL);
            double takeProfitPrice = Position.AveragePrice + (atrValue * AtrMultiplierTP);
            SetStopLoss("LongTrade", CalculationMode.Price, stopLossPrice, false);
            SetProfitTarget("LongTrade", CalculationMode.Price, takeProfitPrice);
            SetTrailStop(CalculationMode.Price, Position.AveragePrice + (atrValue * TrailingStopMultiplier));
        }

        private void SetOrdersForShortTrade()
        {
            double stopLossPrice = Position.AveragePrice + (atrValue * AtrMultiplierSL);
            double takeProfitPrice = Position.AveragePrice - (atrValue * AtrMultiplierTP);
            SetStopLoss("ShortTrade", CalculationMode.Price, stopLossPrice, false);
            SetProfitTarget("ShortTrade", CalculationMode.Price, takeProfitPrice);
            SetTrailStop(CalculationMode.Price, Position.AveragePrice - (atrValue * TrailingStopMultiplier));
        }
    }
}
